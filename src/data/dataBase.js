export const data = [
  {
    name: "Принципы для разработки",
    link: "principles_for_development",
    table: [
      {
        name: "KISS",
        decr: "«Keep it simple, stupid» — «Делай проще, тупица». Принцип KISS утверждает, что большинство систем работают лучше всего, если они остаются простыми",
        link: "kiss",
      },
      {
        name: "DRY",
        decr: "Don't repeat yourself — «не повторяйся»",
        link: "dry",
      },
      {
        name: "YAGNI",
        decr: "You Aren't Gonna Need It / Вам это не понадобится. Если пишете код, то будьте уверены, что он вам понадобится.",
        link: "yagni",
      },
      {
        name: "Big Design Up Front",
        decr: "Глобальное проектирование прежде всего",
        link: "bduf",
      },
      {
        name: "SOLID",
        decr: "5 основных принципов объектно-ориентированного программирования и проектирования",
        link: "solid",
        table: [
          {
            name: "S) Single-responsibility principle /Принцип единственной ответственности",
            decr: "Каждый объект, класс и метод должны отвечать только за что-то одно. Если ваш объект/класс/метод делает слишком много, вы получите спагетти-код.",
          },
          {
            name: "O) Open–closed principle / Принцип открытости-закрытости",
            decr: "Программные объекты должны быть открыты для расширения, но закрыты для модификации. Речь о том, что нельзя переопределять методы или классы, просто добавляя дополнительные функции по мере необходимости. Хороший способ решения этой проблемы – использование наследования. В JavaScript эта проблема решается с помощью композиции.",
          },
          {
            name: "L) Liskov substitution principle / Принцип подстановки Лисков",
            decr: "Этот принцип гласит, что объекты старших классов должны быть заменимы объектами подклассов, и приложение при такой замене должно работать так, как ожидается.",
          },
          {
            name: "I) Interface segregation principle / Принцип разделения интерфейсов",
            decr: "Объекты не должны зависеть от интерфейсов, которые они не используют.      ПО должно разделяться на независимые части. Побочные эффекты необходимо сводить к минимуму, чтобы обеспечивать независимость.",
          },
          {
            name: "D) Dependency inversion principle / Принцип инверсии зависимостей",
            decr: "Мы должны полагаться на абстракции, а не на конкретные реализации. Компоненты ПО должны иметь низкую связность и высокую согласованность.",
          },
        ],
      },
      {
        name: "Avoid Premature Optimization",
        decr: "Избегайте преждевременной оптимизации. Эта практика побуждает разработчиков оптимизировать код до того, как необходимость этой оптимизации будет доказана.",
        link: "avpo",
      },
      {
        name: "Бритва Оккама",
        decr: "«Не следует множить сущее без необходимости» (либо «Не следует привлекать новые сущности без крайней на то необходимости»).",
        link: "okkama",
      },
    ],
  },
  {
    name: "Паттерны проектирования",
    link: "design_patterns",
    table: [
      {
        name: "Порождающие шаблоны (Creational): создание новых объектов.",
        link: "creational",
        decr: "Эти шаблоны используются для создания новых объектов.",
        table: [
          {
            name: "Конструктор (Constructor)",
            decr: "Создает новые объекты в их собственной области видимости.",
            code: "////",
          },
          {
            name: "Модульный (Module)",
            decr: "Используйте для инкапсуляции методов",
            code: "////",
          },
          {
            name: "Фабрика (Factory)",
            decr: "Используйте для того, чтоб упростить создание объектов, проще генерировать экземпляры объектов, не требует использования конструктора.",
            code: "////",
          },
          {
            name: "Синглтон(Singletion)",
            decr: "Используйте для того, чтобы ограничиться одним экземпляром объекта.",
          },
        ],
      },
      {
        name: "Структурные шаблоны(Structural): упорядочивают объекты.",
        link: "structural",
        decr: "Как создаются объекты и какие взаимоотношения между ними. Расширяет или упрощает функциональность.",
        table: [
          {
            name: "Декоратор(Decorator)",
            decr: "Используйте, чтоб добавлять новую функциональность объектам (Расширяет функциональность).",
            code: "////",
          },
          {
            name: "Фасад (Facade)",
            decr: "Используйте для создания простого интерфейса (упрощает функциональность, как например jQuery).",
            code: "////",
          },
        ],
      },
      {
        name: "Поведенческие (Behavioral): как объекты соотносятся друг с другом.",
        link: "behavioral",
        decr: "Распределяют обязанности между объектами и тем, как они сообщаются.",
        table: [
          {
            name: "Наблюдатель(Observer)",
            decr: "Позволяет объектам наблюдать за объектами и быть оповещенными об изменениях.",
            code: "////",
          },
          {
            name: "Посредник(Mediator)",
            decr: "Один объект контролирует сообщение между объектами, поэтому объекты не сообщаются друг с другом на прямую.",
            code: "////",
          },
          {
            name: "Команда(Command)",
            decr: "Инкапсулирует вызов метода в один объект",
            code: "////",
          },
        ],
      },
    ],
  },
];
